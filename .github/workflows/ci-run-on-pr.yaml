name: CI run on PR
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

env:
  # Golang version to use across CI steps
  GOLANG_VERSION: '1.23' # As we have go toolchain 1.23 specified in go.mod

permissions:
  contents: read

jobs:
  codechanges:
    runs-on: ubuntu-22.04
    outputs:
      backend: ${{ steps.filter.outputs.backend_any_changed }}
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - uses: tj-actions/changed-files@e9772d140489982e0e3704fea5ee93d536f1e275 # v45.0.1
        id: filter
        with:
          # Any file which is not under docs/ or is not a markdown file is counted as a backend file
          files_yaml: |
            backend:
              - go.mod
              - go.sum
              - '**.go'
              - '.github/workflows/ci-run-on-pr.yaml'

  check-go:
    name: Ensure Go modules synchronicity
    runs-on: ubuntu-22.04
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Download all Go modules
        run: |
          go mod download
      - name: Check for tidiness of go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code -- .

  lint-go:
    name: Lint Go code
    runs-on: ubuntu-22.04
    needs:
      - codechanges
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: read # for golangci/golangci-lint-action to fetch pull requests
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          args: --verbose --timeout=10m

  shellcheck:
    name: Shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master

  unit-test:
    name: Run unit tests
    runs-on: ubuntu-latest
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Test
        run: make test
      - name: check test coverage
        id: coverage
        uses: vladopajic/go-test-coverage@v2
        with:
          config: .testcoverage.yaml
          profile: cover.out
          continue-on-error: true # Should fail after coverage comment is posted
      - name: Generate test results artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: unittests-coverage
          path: cover.out
      - name: find pull request ID
        run: |
          PR_ID=${GITHUB_REF_NAME%%/merge}
          echo "PR_ID: $PR_ID"

          if [ "$PR_ID" != "null" ]; then
            echo "pull_request_id=$PR_ID" >> $GITHUB_ENV
          else
            echo "No open pull request found for this branch."
          fi
      - name: create badge
        uses: vladopajic/go-test-coverage@v2
        with:
          profile: cover.out
          threshold-total: 13
          git-token: ${{ github.ref_name == 'main' && secrets.GITHUB_TOKEN || '' }}
          git-branch: badges
      - name: post coverage report
        if: env.pull_request_id
        uses: thollander/actions-comment-pull-request@v3
        continue-on-error: true #we need pull_request_target or this will fail when not running pr in BD organisation
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-tag: coverage-report
          pr-number: ${{ env.pull_request_id }}
          message: |
            go-test-coverage report:
            ```
            ${{ fromJSON(steps.coverage.outputs.report) }}```
      - name: 'finally check coverage'
        if: steps.coverage.outcome == 'failure'
        shell: bash
        run: echo "coverage check failed" && exit 1
